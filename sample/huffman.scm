; tree operate
(define (make-leaf symbol weight)
  (list 'leaf symbol weight))
(define (leaf? object)
  (eq? (car object) 'leaf))
(define (symbol-leaf x)
  (car (cdr x)))
(define (weight-leaf x)
  (car (cdr (cdr x))))
(define (make-code-tree left right)
  (list left
        right
        (append (symbols left) (symbols right))
        (+ (weight left) (weight right))))
(define (left-branch tree)
  (car tree))
(define (right-branch tree)
  (car (cdr tree)))
(define (symbols tree)
  (if (leaf? tree)
      (list (symbol-leaf tree))
      (car (cdr (cdr tree)))))
(define (weight tree)
  (if (leaf? tree)
      (weight-leaf tree)
      (car (cdr (cdr (cdr tree))))))
; decode
(define (choose-branch bit branch)
  (cond ((= bit 0) (left-branch branch))
        ((= bit 1) (right-branch branch))
        (else (error "bad bit -- CHOOSE-BRANCH" bit))))
(define (decode bits tree)
  (define (decode-1 bits current-branch)
    (if (null? bits)
        '()
        (let ((next-branch
               (choose-branch (car bits) current-branch)))
          (if (leaf? next-branch)
              (cons (symbol-leaf next-branch)
                    (decode-1 (cdr bits) tree))
              (decode-1 (cdr bits) next-branch)))))
  (decode-1 bits tree))
; pripority queue'
(define (adjoint-set x set)
  (cond ((null? set) (list x))
        ((< (weight x) (weight (car set))) (cons x set))
        (else (cons (car set)
                    (adjoint-set x (cdr set))))))
(define (make-leaf-set pairs)
  (if (null? pairs)
      '()
      (let ((pair (car pairs)))
        (adjoint-set (make-leaf (car pair)
                                (car (cdr pair)))
                     (make-leaf-set (cdr pairs))))))
; encode
(define (encode-symbol symbol tree)
  (define (construct-code node)
    (if (leaf? node)
        (if (eq? symbol (symbol-leaf node))
            '()
            'false)
        (let ((left (construct-code (left-branch node)))
              (right (construct-code (right-branch node))))
          (cond ((not (eq? left 'false))
                 (cons '0 left))
                ((not (eq? right 'false))
                 (cons '1 right))
                (else 'false)))))
  (let ((code (construct-code tree)))
    (if (eq? code 'false)
        (error "Unknown symbol -- ENCODE" symbol)
        code)))
(define (encode message tree)
  (if (null? message)
      '()
      (append (encode-symbol (car message) tree)
              (encode (cdr message) tree))))
; build tree
(define (successive-merge leaf-set)
  (define (merge)
    (if (null? (cdr leaf-set))
        "done"
        (let ((left (car leaf-set))
              (right (car (cdr leaf-set))))
          (set! leaf-set (cdr (cdr leaf-set)))
          (set! leaf-set (adjoint-set (make-code-tree left right) leaf-set))
          (merge))))
  (merge)
  (car leaf-set))
(define (generate-huffman-tree pairs)
  (successive-merge (make-leaf-set pairs)))
; test decode
(define sample-tree
  (make-code-tree (make-leaf 'A 4)
                  (make-code-tree
                   (make-leaf 'B 2)
                   (make-code-tree (make-leaf 'D 1)
                                   (make-leaf 'C 1)))))
(define sample-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))
(define sample (decode sample-message sample-tree))
sample
(define pairs
  (list (list 'A 4)
        (list 'B 2)
        (list 'C 1)
        (list 'D 1)))
(define tree (generate-huffman-tree pairs))
(encode sample tree)